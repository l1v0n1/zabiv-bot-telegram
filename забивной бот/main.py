import logging
from aiogram import Bot, Dispatcher, executor, types
import sqlite3
import keyboard as kb
from config import API_TOKEN, admin, admin_name
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
import random
from aiogram.utils.exceptions import Throttled
import emoji as emo
import os

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

connection = sqlite3.connect('data.db')
q = connection.cursor()

class info(StatesGroup):
	name = State()
	rasst = State()

async def antiflood(*args, **kwargs):
    m = args[0]
    await m.answer("‚è≥ –•–æ–¥–∏—Ç—å –Ω–∞ –∑–∞–±–∏–≤—ã –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 15 —Å–µ–∫—É–Ω–¥...")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	q.execute(f"SELECT * FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchall()
	if len(result) == 0:
		q.execute(f"INSERT INTO users (user_id, win)"
					f"VALUES ('{message.chat.id}', '0')")
		connection.commit()
		await message.answer('–ó–¥–∞—Ä–æ–≤–∞, —Ö–ª—é–ø–∏–∫.\n–ó–¥–µ—Å—å –∑–∞–±–∏–≤–∞—é—Ç—Å—è —Å–∞–º—ã–µ –æ—Ç–±–∏—Ç—ã–µ –ø–∞—Ü–∞–Ω—á–∏–∫–∏.\n\n–ù—É –∫–∞, –≤–≤–µ–¥–∏ —Ç—É—Ç —Å–≤–æ—ë –ø–æ–≥–æ–Ω—è–ª–æ:')
		await info.name.set()
	else:
		await message.answer('–ó–¥–∞—Ä–æ–≤–∞, —Ö–ª—é–ø–∏–∫.\n–ó–¥–µ—Å—å –∑–∞–±–∏–≤–∞—é—Ç—Å—è —Å–∞–º—ã–µ –æ—Ç–±–∏—Ç—ã–µ –ø–∞—Ü–∞–Ω—á–∏–∫–∏.', reply_markup=kb.keyboard)

@dp.message_handler(state=info.name)
async def name(message: types.Message, state: FSMContext):
	res = q.execute("SELECT name FROM users WHERE lower(name) LIKE lower('{}')".format(message.text)).fetchall()
	if len(res) == 0:
		if len(message.text) <= 20:
			q.execute('UPDATE users SET name = ? WHERE user_id = ?', (message.text, message.chat.id))
			connection.commit()
			await message.answer('–•–æ—Ä–æ—à–æ, –±—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è {}'.format(message.text), reply_markup=kb.keyboard)
			await state.finish()
		else:
			await message.answer('–ü—Ä–∏–¥—É–º–∞–π –∫–ª–∏—á–∫—É –ø–æ –∫–æ—Ä–æ—á–µ, –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤..')
	else:
		await message.answer('–î–∞–Ω–Ω–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.')

@dp.message_handler(commands=['admin'])
async def adminstration(message: types.Message):
	if message.chat.id == admin:
		await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=kb.apanel)
	else:
		await message.answer('–ß–µ—Ä—Ç! –¢—ã –º–µ–Ω—è –≤–∑–ª–æ–º–∞–ª :(')

@dp.callback_query_handler(lambda call: call.data.startswith('rass'))    
async def usender(call):
	await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá', reply_markup=kb.back)
	await info.rasst.set()

@dp.message_handler(state=info.rasst)
async def process_name(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.keyboard)
		await state.finish()
	else:
		info = row
		await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(message.text))
			except:
				pass
		await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=kb.keyboard)
		await state.finish()


@dp.message_handler(content_types=['text'], text='üì∞ –ü—Ä–æ—Ñ–∏–ª—å')
async def stats(message: types.Message):
	n = q.execute(f'SELECT name FROM users WHERE user_id = {message.chat.id}').fetchone()
	z = q.execute(f'SELECT win FROM users WHERE user_id = {message.chat.id}').fetchone()
	connection.commit()
	name = n[0]
	wins = z[0]
	await message.answer(f'–í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —Å–∞–ª–∞–≥–∞:\nüÜî: {message.chat.id}\nüìã –ö–ª–∏—á–∫–∞: {name}\nüèÜ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {wins}', reply_markup=kb.keyboard)

@dp.message_handler(content_types=['text'], text='‚ÑπÔ∏è –ü–æ–º–æ—â—å')
async def help(message: types.Message):
	link = f'tg://user?id={admin}'
	await message.answer(f'–¢–µ–±–µ –Ω–∞–±–∏–ª–∏ –µ–±–∞–ª–æ –≤ –∑–∞–±–∏–≤–µ? –•–æ—á–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Ñ—Ñ–Ω–∏–∫–∞ –æ —á–µ–º-–ª–∏–±–æ?\n–¢–µ–±–µ —Å—é–¥–∞ - {admin_name}', reply_markup=kb.keyboard)

@dp.message_handler(content_types=['text'], text='üëä –ó–∞–±–∏–≤')
@dp.throttled(antiflood, rate=15)
async def fight(message: types.Message, state: FSMContext):
	chance = random.randint(0, 5)
	if chance in [1, 3, 5]:
		p = random.choice(os.listdir("images/"))
		photo = f'images/{p}'
		with open(photo, 'rb') as file:
			rnd = random.randint(1,10)
			q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(rnd, message.chat.id))
			connection.commit()
			await bot.send_photo(message.chat.id, file, caption='ü•á –ó–∞–±–∏–≤—á–∏–∫ —É–¥–∞–ª—Å—è, –ê-–£-–ï!\n–¢–≤–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥–Ω—è–ª—Å—è: +{}'.format(rnd))
			file.close()
	else:
		rnds = random.randint(1,6)
		q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(rnds, message.chat.id))
		connection.commit()
		await message.answer('–¢–µ–±—è —Ä–∞–∑—ä–µ–±–∞–ª–∏ –Ω–∞ –∑–∞–±–∏–≤–µ..\n–¢—ã –ø–∞–¥–∞–µ—à—å –≤ –≥–ª–∞–∑–∞—Ö –±—Ä–∞—Ç–≤—ã: -{}'.format(rnds))

@dp.message_handler(content_types=['text'], text='üèÜ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç—ã')
async def rating(message: types.Message):
	q.execute(f"SELECT user_id, name, win FROM users order by win desc")
	res = q.fetchall()
	one = emo.emojize(':one:', use_aliases=True)
	two = emo.emojize(':two:', use_aliases=True)
	three = emo.emojize(':three:', use_aliases=True)
	four = emo.emojize(':four:', use_aliases=True)
	five = emo.emojize(':five:', use_aliases=True)
	six = emo.emojize(':six:', use_aliases=True)
	seven = emo.emojize(':seven:', use_aliases=True)
	eight = emo.emojize(':eight:', use_aliases=True)
	nine = emo.emojize(':nine:', use_aliases=True)
	ten = emo.emojize(':ten:', use_aliases=True)
	zero = emo.emojize(':zero:', use_aliases=True)
	em = {0: zero, 1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine, 10: ten}
	message_lines = []
	for index, item in enumerate(res, 1):

		message_lines.append(f"{em.get(index)} [{item[1]}](tg://user?id={item[0]}): {item[2]} —Ä–µ–π—Ç–∏–Ω–≥–∞")
	am = message_lines[:10]
	mes = '\n'.join(am)
	await message.answer(f'–°–∞–º—ã–µ –±–ª–∞—Ç–Ω—ã–µ –ø–∞—Ü–∞–Ω—ã:\n{mes}', parse_mode='Markdown')


if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True) # –ó–∞–ø—É—Å–∫